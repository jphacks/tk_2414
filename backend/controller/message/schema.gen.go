// Package message provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package message

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
)

// ProcessMessageJSONBody defines parameters for ProcessMessage.
type ProcessMessageJSONBody struct {
	ChatId  *string `json:"chat_id,omitempty"`
	Message *string `json:"message,omitempty"`
}

// ProcessMessageJSONRequestBody defines body for ProcessMessage for application/json ContentType.
type ProcessMessageJSONRequestBody ProcessMessageJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get chat IDs by user ID and lecture ID
	// (GET /chats/{user_id}/{lecture_id})
	GetChatsByUserIDAndLectureID(c *gin.Context, userId string, lectureId string)
	// Send a chat message
	// (POST /message/{lecture_id}/{user_id})
	ProcessMessage(c *gin.Context, lectureId string, userId string)
	// Get chat messages
	// (GET /messages/chat/{chat_id})
	GetMessagesByChatID(c *gin.Context, chatId string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// GetChatsByUserIDAndLectureID operation middleware
func (siw *ServerInterfaceWrapper) GetChatsByUserIDAndLectureID(c *gin.Context) {

	var err error

	// ------------- Path parameter "user_id" -------------
	var userId string

	err = runtime.BindStyledParameter("simple", false, "user_id", c.Param("user_id"), &userId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter user_id: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "lecture_id" -------------
	var lectureId string

	err = runtime.BindStyledParameter("simple", false, "lecture_id", c.Param("lecture_id"), &lectureId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter lecture_id: %s", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetChatsByUserIDAndLectureID(c, userId, lectureId)
}

// ProcessMessage operation middleware
func (siw *ServerInterfaceWrapper) ProcessMessage(c *gin.Context) {

	var err error

	// ------------- Path parameter "lecture_id" -------------
	var lectureId string

	err = runtime.BindStyledParameter("simple", false, "lecture_id", c.Param("lecture_id"), &lectureId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter lecture_id: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "user_id" -------------
	var userId string

	err = runtime.BindStyledParameter("simple", false, "user_id", c.Param("user_id"), &userId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter user_id: %s", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.ProcessMessage(c, lectureId, userId)
}

// GetMessagesByChatID operation middleware
func (siw *ServerInterfaceWrapper) GetMessagesByChatID(c *gin.Context) {

	var err error

	// ------------- Path parameter "chat_id" -------------
	var chatId string

	err = runtime.BindStyledParameter("simple", false, "chat_id", c.Param("chat_id"), &chatId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter chat_id: %s", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetMessagesByChatID(c, chatId)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router *gin.Engine, si ServerInterface) *gin.Engine {
	return RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router *gin.Engine, si ServerInterface, options GinServerOptions) *gin.Engine {

	errorHandler := options.ErrorHandler

	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/chats/:user_id/:lecture_id", wrapper.GetChatsByUserIDAndLectureID)

	router.POST(options.BaseURL+"/message/:lecture_id/:user_id", wrapper.ProcessMessage)

	router.GET(options.BaseURL+"/messages/chat/:chat_id", wrapper.GetMessagesByChatID)

	return router
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9xWXWvbXAz+Kwdd+23y7uPGd+0Cw7BBYexqlHDioyan2Od4khIwxv996NhpE+qVJC1j",
	"7MqxkR49+nikdFDGuokBgzDkXZ+BD/cR8g7ES4WQw6eNFXN9W0AGOyT2MUAO/1/Nr+bQZxAbDLbxkMP7",
	"9CmDxspGoWBWbqzwrNsy0tK7ftZVWMqWUF/UYI2ij9ggWfExFA5y+IyiEfmm/c5IxeI6uC+DW7FI6GRr",
	"FCSG/EcHXsloRMgg2Fr5juEgA8KfW0/oIBfaYgZcbrC2Kbe2UVMW8mENfZ9NIj3RPQvsTo25iYEx1eHd",
	"fK6PMgbBkDK2TVP5MuU8e2AtaHeA5wXr5NiQlkb8AKPVVCrPI2ZQI7NdD3a/cye0gm5pE4P7SLX+AmcF",
	"/xNfI2TPYT0vtZoHIVcxVmjDQcyX+EzT7R8jxdUDlgJPHyyRbfWdcV1jkEsB1MQhl+QbGQY2TXGxYGOD",
	"M4SV1sI4K9YQCnncoTO8LUtkvt9WVSLxYWjcMVARdrbyzmhhTLEwkcw4J6ZYqNfHaS9BCrYyjLRDMkgU",
	"KWXC27q21A6Tb8o9zVX7GEEZH4boM5iNBT6S1JPSUvcjT6jrlqKm+HXs3Sl6ulAF2ZuJ824wRpab6Nqz",
	"pHS2gk6aNv10TL9/peSPea6iLA/4nJ7ERRqfhrpQ+lPSTD3/Z/KZHodjtY/yMoxBztsqo/51q4yk0pJ6",
	"1V75hsEZO0DvMz1cIpwO9awbO/HiaR4z45tWF+qJF3nf4r/hiP65K3jJldqX99KjNI7P25yhxz8Vfd/3",
	"vwIAAP//B6GPcygKAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
