// Package test provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package test

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
)

// PostQuizResultJSONBody defines parameters for PostQuizResult.
type PostQuizResultJSONBody = []struct {
	ChoiceId   *string `json:"choice_id,omitempty"`
	QuestionId *string `json:"question_id,omitempty"`
	TestId     *string `json:"test_id,omitempty"`
	UserId     *string `json:"user_id,omitempty"`
}

// PostQuizResultJSONRequestBody defines body for PostQuizResult for application/json ContentType.
type PostQuizResultJSONRequestBody = PostQuizResultJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Submit quiz result
	// (POST /test/submit)
	PostQuizResult(c *gin.Context)
	// Get quiz for a lecture
	// (GET /test/{lecture_id})
	GetQuizByLectureID(c *gin.Context, lectureId string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// PostQuizResult operation middleware
func (siw *ServerInterfaceWrapper) PostQuizResult(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.PostQuizResult(c)
}

// GetQuizByLectureID operation middleware
func (siw *ServerInterfaceWrapper) GetQuizByLectureID(c *gin.Context) {

	var err error

	// ------------- Path parameter "lecture_id" -------------
	var lectureId string

	err = runtime.BindStyledParameter("simple", false, "lecture_id", c.Param("lecture_id"), &lectureId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter lecture_id: %s", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetQuizByLectureID(c, lectureId)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router *gin.Engine, si ServerInterface) *gin.Engine {
	return RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router *gin.Engine, si ServerInterface, options GinServerOptions) *gin.Engine {

	errorHandler := options.ErrorHandler

	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.POST(options.BaseURL+"/test/submit", wrapper.PostQuizResult)

	router.GET(options.BaseURL+"/test/:lecture_id", wrapper.GetQuizByLectureID)

	return router
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/6xTzW7cPAx8FYFnI7vf1/biW4MAwQI9pD+3ogi0MjfLwJYUklrUNfzuBeUU2wZOgTY9",
	"yaKG5HA4niCkIaeIUQXaaW6A4iFBO4GS9ggtfEJR9/ZmBw2ckIVShBb+u9hebGFuIGWMPhO08KqGGshe",
	"j1YKNoqiGyn7gdTuOUk9U0b2SinuOmjhJom+L/TtA0rpFRpgfCgoepm60dAhRcVYE33OPYWaurkX4zGB",
	"hCMO3r5Icah9M1sHJay3cEwU8Ja6OtOYbSRRpnhn9GsrSvG5dxvhubciyOtvlrhE0v4eg8I54Jn9CLNB",
	"bFBi7KBVLlgDklOUhff/260dHUpgyrrIbkI5rkqJW5RV7JyUEFDkUPp+tF6v13J38eR76hzFXNR1Xr1B",
	"36xDFTn63gnyCdkhc+I6lpRh8DxCCx9rd/dwZlQBy9KnHoMWNtlnK3+HK5u/xrr4y/HdAt5dVfewH1CR",
	"BdrPE5DRMUdBA9EPpuC5NDzVsPnJDk9X8mVd339jL/kNguQ2JGazwZnWPqUefVws9lX/ykMvSDXIryuv",
	"fzmjMuHpTx31uBG3u3qRo67x0U6HxM7/qGpk5+8BAAD//zI27fGmBAAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
