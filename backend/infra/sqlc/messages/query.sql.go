// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: query.sql

package messages

import (
	"context"
	"database/sql"

	"github.com/lib/pq"
)

const deleteMessage = `-- name: DeleteMessage :exec
UPDATE messages
SET deleted_at = now()
WHERE id = $1
`

func (q *Queries) DeleteMessage(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteMessage, id)
	return err
}

const getMessageByChatID = `-- name: GetMessageByChatID :many
SELECT id, is_user, chat_id, message, created_at
FROM messages
WHERE chat_id = $1 AND deleted_at IS NULL
ORDER BY created_at ASC
`

type GetMessageByChatIDRow struct {
	ID        string
	IsUser    bool
	ChatID    string
	Message   string
	CreatedAt sql.NullTime
}

func (q *Queries) GetMessageByChatID(ctx context.Context, chatID string) ([]GetMessageByChatIDRow, error) {
	rows, err := q.db.QueryContext(ctx, getMessageByChatID, chatID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetMessageByChatIDRow
	for rows.Next() {
		var i GetMessageByChatIDRow
		if err := rows.Scan(
			&i.ID,
			&i.IsUser,
			&i.ChatID,
			&i.Message,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getMessagesByChatIDs = `-- name: GetMessagesByChatIDs :many
SELECT id, chat_id, message, is_user, created_at
FROM messages
WHERE chat_id = ANY($1::text[])
`

type GetMessagesByChatIDsRow struct {
	ID        string
	ChatID    string
	Message   string
	IsUser    bool
	CreatedAt sql.NullTime
}

func (q *Queries) GetMessagesByChatIDs(ctx context.Context, dollar_1 []string) ([]GetMessagesByChatIDsRow, error) {
	rows, err := q.db.QueryContext(ctx, getMessagesByChatIDs, pq.Array(dollar_1))
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetMessagesByChatIDsRow
	for rows.Next() {
		var i GetMessagesByChatIDsRow
		if err := rows.Scan(
			&i.ID,
			&i.ChatID,
			&i.Message,
			&i.IsUser,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const sendMessage = `-- name: SendMessage :one
INSERT INTO messages (id, is_user, chat_id, message)
VALUES ($1, $2, $3, $4)
RETURNING id, is_user, chat_id, message, created_at
`

type SendMessageParams struct {
	ID      string
	IsUser  bool
	ChatID  string
	Message string
}

type SendMessageRow struct {
	ID        string
	IsUser    bool
	ChatID    string
	Message   string
	CreatedAt sql.NullTime
}

func (q *Queries) SendMessage(ctx context.Context, arg SendMessageParams) (SendMessageRow, error) {
	row := q.db.QueryRowContext(ctx, sendMessage,
		arg.ID,
		arg.IsUser,
		arg.ChatID,
		arg.Message,
	)
	var i SendMessageRow
	err := row.Scan(
		&i.ID,
		&i.IsUser,
		&i.ChatID,
		&i.Message,
		&i.CreatedAt,
	)
	return i, err
}
