// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: query.sql

package chats

import (
	"context"
	"database/sql"

	"github.com/lib/pq"
)

const createChat = `-- name: CreateChat :one
INSERT INTO chats (id, user_id, segment_id)
VALUES ($1, $2, $3)
RETURNING id, user_id, segment_id, created_at
`

type CreateChatParams struct {
	ID        string
	UserID    string
	SegmentID string
}

type CreateChatRow struct {
	ID        string
	UserID    string
	SegmentID string
	CreatedAt sql.NullTime
}

func (q *Queries) CreateChat(ctx context.Context, arg CreateChatParams) (CreateChatRow, error) {
	row := q.db.QueryRowContext(ctx, createChat, arg.ID, arg.UserID, arg.SegmentID)
	var i CreateChatRow
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.SegmentID,
		&i.CreatedAt,
	)
	return i, err
}

const deleteChat = `-- name: DeleteChat :exec
UPDATE chats
SET deleted_at = now()
WHERE id = $1
`

func (q *Queries) DeleteChat(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteChat, id)
	return err
}

const getChatByID = `-- name: GetChatByID :one
SELECT id, user_id, segment_id, created_at, updated_at
FROM chats
WHERE id = $1 AND deleted_at IS NULL
`

type GetChatByIDRow struct {
	ID        string
	UserID    string
	SegmentID string
	CreatedAt sql.NullTime
	UpdatedAt sql.NullTime
}

func (q *Queries) GetChatByID(ctx context.Context, id string) (GetChatByIDRow, error) {
	row := q.db.QueryRowContext(ctx, getChatByID, id)
	var i GetChatByIDRow
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.SegmentID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getChatIdsByUserAndSegments = `-- name: GetChatIdsByUserAndSegments :many
SELECT id, segment_id
FROM chats
WHERE user_id = $1
AND segment_id = ANY($2::text[])
`

type GetChatIdsByUserAndSegmentsParams struct {
	UserID  string
	Column2 []string
}

type GetChatIdsByUserAndSegmentsRow struct {
	ID        string
	SegmentID string
}

func (q *Queries) GetChatIdsByUserAndSegments(ctx context.Context, arg GetChatIdsByUserAndSegmentsParams) ([]GetChatIdsByUserAndSegmentsRow, error) {
	rows, err := q.db.QueryContext(ctx, getChatIdsByUserAndSegments, arg.UserID, pq.Array(arg.Column2))
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetChatIdsByUserAndSegmentsRow
	for rows.Next() {
		var i GetChatIdsByUserAndSegmentsRow
		if err := rows.Scan(&i.ID, &i.SegmentID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
