// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: query.sql

package user_subjects

import (
	"context"
	"database/sql"
)

const insertUserSubject = `-- name: InsertUserSubject :one
INSERT INTO user_subjects (id, user_id, subject_id)
VALUES ($1, $2, $3)
RETURNING id, user_id, subject_id, created_at, updated_at
`

type InsertUserSubjectParams struct {
	ID        string
	UserID    string
	SubjectID string
}

type InsertUserSubjectRow struct {
	ID        string
	UserID    string
	SubjectID string
	CreatedAt sql.NullTime
	UpdatedAt sql.NullTime
}

func (q *Queries) InsertUserSubject(ctx context.Context, arg InsertUserSubjectParams) (InsertUserSubjectRow, error) {
	row := q.db.QueryRowContext(ctx, insertUserSubject, arg.ID, arg.UserID, arg.SubjectID)
	var i InsertUserSubjectRow
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.SubjectID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const selectSubjectIDsByUserID = `-- name: SelectSubjectIDsByUserID :many
SELECT subject_id
FROM user_subjects
WHERE user_id = $1
  AND deleted_at IS NULL
`

func (q *Queries) SelectSubjectIDsByUserID(ctx context.Context, userID string) ([]string, error) {
	rows, err := q.db.QueryContext(ctx, selectSubjectIDsByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var subject_id string
		if err := rows.Scan(&subject_id); err != nil {
			return nil, err
		}
		items = append(items, subject_id)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
