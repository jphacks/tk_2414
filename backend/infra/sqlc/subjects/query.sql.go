// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: query.sql

package subjects

import (
	"context"
)

const selectAllSubjects = `-- name: SelectAllSubjects :many
SELECT id, name
FROM subjects
WHERE deleted_at IS NULL
ORDER BY created_at ASC
`

type SelectAllSubjectsRow struct {
	ID   string
	Name string
}

func (q *Queries) SelectAllSubjects(ctx context.Context) ([]SelectAllSubjectsRow, error) {
	rows, err := q.db.QueryContext(ctx, selectAllSubjects)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SelectAllSubjectsRow
	for rows.Next() {
		var i SelectAllSubjectsRow
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const selectSubjectNameByID = `-- name: SelectSubjectNameByID :one
SELECT name
FROM subjects
WHERE id = $1
  AND deleted_at IS NULL
`

func (q *Queries) SelectSubjectNameByID(ctx context.Context, id string) (string, error) {
	row := q.db.QueryRowContext(ctx, selectSubjectNameByID, id)
	var name string
	err := row.Scan(&name)
	return name, err
}
