// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: query.sql

package user_progresses

import (
	"context"
	"database/sql"
)

const insertUserProgress = `-- name: InsertUserProgress :one
INSERT INTO user_progresses (id, lecture_id, user_id)
VALUES ($1, $2, $3)
RETURNING id, lecture_id, user_id, created_at, updated_at
`

type InsertUserProgressParams struct {
	ID        string
	LectureID string
	UserID    string
}

type InsertUserProgressRow struct {
	ID        string
	LectureID string
	UserID    string
	CreatedAt sql.NullTime
	UpdatedAt sql.NullTime
}

func (q *Queries) InsertUserProgress(ctx context.Context, arg InsertUserProgressParams) (InsertUserProgressRow, error) {
	row := q.db.QueryRowContext(ctx, insertUserProgress, arg.ID, arg.LectureID, arg.UserID)
	var i InsertUserProgressRow
	err := row.Scan(
		&i.ID,
		&i.LectureID,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const selectAllUserProgressByUserID = `-- name: SelectAllUserProgressByUserID :many
SELECT id, user_id, lecture_id
FROM user_progresses
WHERE user_id = $1
`

type SelectAllUserProgressByUserIDRow struct {
	ID        string
	UserID    string
	LectureID string
}

func (q *Queries) SelectAllUserProgressByUserID(ctx context.Context, userID string) ([]SelectAllUserProgressByUserIDRow, error) {
	rows, err := q.db.QueryContext(ctx, selectAllUserProgressByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SelectAllUserProgressByUserIDRow
	for rows.Next() {
		var i SelectAllUserProgressByUserIDRow
		if err := rows.Scan(&i.ID, &i.UserID, &i.LectureID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const selectOngoingProgressByUserID = `-- name: SelectOngoingProgressByUserID :many
SELECT lecture_id
FROM user_progresses
WHERE user_id = $1
  AND deleted_at IS NULL
`

func (q *Queries) SelectOngoingProgressByUserID(ctx context.Context, userID string) ([]string, error) {
	rows, err := q.db.QueryContext(ctx, selectOngoingProgressByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var lecture_id string
		if err := rows.Scan(&lecture_id); err != nil {
			return nil, err
		}
		items = append(items, lecture_id)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const selectUserProgressByLectureID = `-- name: SelectUserProgressByLectureID :one
SELECT id, user_id, lecture_id
FROM user_progresses
WHERE lecture_id = $1
  AND user_id = $2
`

type SelectUserProgressByLectureIDParams struct {
	LectureID string
	UserID    string
}

type SelectUserProgressByLectureIDRow struct {
	ID        string
	UserID    string
	LectureID string
}

func (q *Queries) SelectUserProgressByLectureID(ctx context.Context, arg SelectUserProgressByLectureIDParams) (SelectUserProgressByLectureIDRow, error) {
	row := q.db.QueryRowContext(ctx, selectUserProgressByLectureID, arg.LectureID, arg.UserID)
	var i SelectUserProgressByLectureIDRow
	err := row.Scan(&i.ID, &i.UserID, &i.LectureID)
	return i, err
}

const selectUserProgressByUserIDAndMonth = `-- name: SelectUserProgressByUserIDAndMonth :many
SELECT lecture_id, created_at
FROM user_progresses
WHERE user_id = $1
  AND to_char(created_at, 'YYYY-MM') = $2
  AND deleted_at IS NULL
`

type SelectUserProgressByUserIDAndMonthParams struct {
	UserID    string
	CreatedAt sql.NullTime
}

type SelectUserProgressByUserIDAndMonthRow struct {
	LectureID string
	CreatedAt sql.NullTime
}

func (q *Queries) SelectUserProgressByUserIDAndMonth(ctx context.Context, arg SelectUserProgressByUserIDAndMonthParams) ([]SelectUserProgressByUserIDAndMonthRow, error) {
	rows, err := q.db.QueryContext(ctx, selectUserProgressByUserIDAndMonth, arg.UserID, arg.CreatedAt)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SelectUserProgressByUserIDAndMonthRow
	for rows.Next() {
		var i SelectUserProgressByUserIDAndMonthRow
		if err := rows.Scan(&i.LectureID, &i.CreatedAt); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
