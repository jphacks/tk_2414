// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: query.sql

package tests

import (
	"context"

	"github.com/lib/pq"
)

const getChoicesForQuestionIDs = `-- name: GetChoicesForQuestionIDs :many
SELECT id, text, is_correct
FROM choices 
WHERE question_id = ANY($1::TEXT[])
  AND deleted_at IS NULL
`

type GetChoicesForQuestionIDsRow struct {
	ID        string
	Text      string
	IsCorrect bool
}

func (q *Queries) GetChoicesForQuestionIDs(ctx context.Context, dollar_1 []string) ([]GetChoicesForQuestionIDsRow, error) {
	rows, err := q.db.QueryContext(ctx, getChoicesForQuestionIDs, pq.Array(dollar_1))
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetChoicesForQuestionIDsRow
	for rows.Next() {
		var i GetChoicesForQuestionIDsRow
		if err := rows.Scan(&i.ID, &i.Text, &i.IsCorrect); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getQuestionsForTestID = `-- name: GetQuestionsForTestID :many
SELECT id, text
FROM questions 
WHERE test_id = $1 
  AND deleted_at IS NULL
ORDER BY created_at ASC
`

type GetQuestionsForTestIDRow struct {
	ID   string
	Text string
}

func (q *Queries) GetQuestionsForTestID(ctx context.Context, testID string) ([]GetQuestionsForTestIDRow, error) {
	rows, err := q.db.QueryContext(ctx, getQuestionsForTestID, testID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetQuestionsForTestIDRow
	for rows.Next() {
		var i GetQuestionsForTestIDRow
		if err := rows.Scan(&i.ID, &i.Text); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTestIDForLectureID = `-- name: GetTestIDForLectureID :one
SELECT id 
FROM tests 
WHERE lecture_id = $1 
  AND deleted_at IS NULL
`

func (q *Queries) GetTestIDForLectureID(ctx context.Context, lectureID string) (string, error) {
	row := q.db.QueryRowContext(ctx, getTestIDForLectureID, lectureID)
	var id string
	err := row.Scan(&id)
	return id, err
}

const postQuizResult = `-- name: PostQuizResult :exec
INSERT INTO quiz_results (id, user_id, test_id, question_id, choice_id)
VALUES (
  unnest($1::TEXT[]),
  unnest($2::TEXT[]),
  unnest($3::TEXT[]),
  unnest($4::TEXT[]),
  unnest($5::TEXT[])
)
`

type PostQuizResultParams struct {
	Column1 []string
	Column2 []string
	Column3 []string
	Column4 []string
	Column5 []string
}

func (q *Queries) PostQuizResult(ctx context.Context, arg PostQuizResultParams) error {
	_, err := q.db.ExecContext(ctx, postQuizResult,
		pq.Array(arg.Column1),
		pq.Array(arg.Column2),
		pq.Array(arg.Column3),
		pq.Array(arg.Column4),
		pq.Array(arg.Column5),
	)
	return err
}
