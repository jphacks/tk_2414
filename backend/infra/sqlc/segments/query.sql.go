// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: query.sql

package segments

import (
	"context"

	"github.com/lib/pq"
)

const deleteSegment = `-- name: DeleteSegment :exec
UPDATE segments
SET deleted_at = now()
WHERE id = $1
`

func (q *Queries) DeleteSegment(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteSegment, id)
	return err
}

const getMaterialsForLecture = `-- name: GetMaterialsForLecture :many
WITH RECURSIVE ordered_segments AS (
    SELECT s.id AS segment_id, s.voice, s.content, s.next
    FROM segments s  -- テーブルエイリアス "s" を追加
    WHERE s.lecture_id = $1  -- lecture_id に "s" を追加して曖昧さを解消
      AND s.prev IS NULL
      AND s.deleted_at IS NULL

    UNION ALL

    SELECT s.id AS segment_id, s.voice, s.content, s.next
    FROM segments s
    INNER JOIN ordered_segments os ON s.id = os.next
    WHERE s.deleted_at IS NULL
)
SELECT segment_id, voice, content
FROM ordered_segments
`

type GetMaterialsForLectureRow struct {
	SegmentID string
	Voice     string
	Content   string
}

func (q *Queries) GetMaterialsForLecture(ctx context.Context, lectureID string) ([]GetMaterialsForLectureRow, error) {
	rows, err := q.db.QueryContext(ctx, getMaterialsForLecture, lectureID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetMaterialsForLectureRow
	for rows.Next() {
		var i GetMaterialsForLectureRow
		if err := rows.Scan(&i.SegmentID, &i.Voice, &i.Content); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSegmentTagsByLectureID = `-- name: GetSegmentTagsByLectureID :many
SELECT id, tags
FROM segments
WHERE lecture_id = $1
`

type GetSegmentTagsByLectureIDRow struct {
	ID   string
	Tags []string
}

func (q *Queries) GetSegmentTagsByLectureID(ctx context.Context, lectureID string) ([]GetSegmentTagsByLectureIDRow, error) {
	rows, err := q.db.QueryContext(ctx, getSegmentTagsByLectureID, lectureID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetSegmentTagsByLectureIDRow
	for rows.Next() {
		var i GetSegmentTagsByLectureIDRow
		if err := rows.Scan(&i.ID, pq.Array(&i.Tags)); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSegmentsByLectureID = `-- name: GetSegmentsByLectureID :many
SELECT id
FROM segments
WHERE lecture_id = $1
`

func (q *Queries) GetSegmentsByLectureID(ctx context.Context, lectureID string) ([]string, error) {
	rows, err := q.db.QueryContext(ctx, getSegmentsByLectureID, lectureID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var id string
		if err := rows.Scan(&id); err != nil {
			return nil, err
		}
		items = append(items, id)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const saveMaterials = `-- name: SaveMaterials :exec
INSERT INTO segments_local (id, content, user_id)
SELECT unnest($1::text[]), unnest($2::text[]), $3::text
ON CONFLICT (id) DO UPDATE
SET content = EXCLUDED.content, updated_at = now(), user_id = EXCLUDED.user_id
`

type SaveMaterialsParams struct {
	Column1 []string
	Column2 []string
	Column3 string
}

func (q *Queries) SaveMaterials(ctx context.Context, arg SaveMaterialsParams) error {
	_, err := q.db.ExecContext(ctx, saveMaterials, pq.Array(arg.Column1), pq.Array(arg.Column2), arg.Column3)
	return err
}
